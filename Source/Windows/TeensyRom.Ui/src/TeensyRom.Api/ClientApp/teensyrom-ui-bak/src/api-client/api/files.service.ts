/**
 * TeensyRom.Api
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { GetDirectoryResponse } from '../model/getDirectoryResponse';
// @ts-ignore
import { IndexAllResponse } from '../model/indexAllResponse';
// @ts-ignore
import { IndexResponse } from '../model/indexResponse';
// @ts-ignore
import { LaunchFileResponse } from '../model/launchFileResponse';
// @ts-ignore
import { LaunchRandomResponse } from '../model/launchRandomResponse';
// @ts-ignore
import { ProblemDetails } from '../model/problemDetails';
// @ts-ignore
import { StorageScope } from '../model/storageScope';
// @ts-ignore
import { TeensyFilterType } from '../model/teensyFilterType';
// @ts-ignore
import { TeensyStorageType } from '../model/teensyStorageType';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    FilesServiceInterface,
    DevicesDeviceIdStorageStorageTypeDirectoriesGetRequestParams,
    DevicesDeviceIdStorageStorageTypeIndexPostRequestParams,
    DevicesDeviceIdStorageStorageTypeLaunchPostRequestParams,
    DevicesDeviceIdStorageStorageTypeRandomLaunchPostRequestParams
} from './files.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class FilesService extends BaseService implements FilesServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Gets a directory for given storage device
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public devicesDeviceIdStorageStorageTypeDirectoriesGet(requestParameters: DevicesDeviceIdStorageStorageTypeDirectoriesGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<GetDirectoryResponse>;
    public devicesDeviceIdStorageStorageTypeDirectoriesGet(requestParameters: DevicesDeviceIdStorageStorageTypeDirectoriesGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetDirectoryResponse>>;
    public devicesDeviceIdStorageStorageTypeDirectoriesGet(requestParameters: DevicesDeviceIdStorageStorageTypeDirectoriesGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetDirectoryResponse>>;
    public devicesDeviceIdStorageStorageTypeDirectoriesGet(requestParameters: DevicesDeviceIdStorageStorageTypeDirectoriesGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const deviceId = requestParameters?.deviceId;
        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling devicesDeviceIdStorageStorageTypeDirectoriesGet.');
        }
        const storageType = requestParameters?.storageType;
        if (storageType === null || storageType === undefined) {
            throw new Error('Required parameter storageType was null or undefined when calling devicesDeviceIdStorageStorageTypeDirectoriesGet.');
        }
        const path = requestParameters?.path;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>path, 'Path');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/problem+json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/devices/${this.configuration.encodeParam({name: "deviceId", value: deviceId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/storage/${this.configuration.encodeParam({name: "storageType", value: storageType, in: "path", style: "simple", explode: false, dataType: "TeensyStorageType", dataFormat: undefined})}/directories`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GetDirectoryResponse>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Indexes the directory structure of a given TR device and storage  type.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public devicesDeviceIdStorageStorageTypeIndexPost(requestParameters: DevicesDeviceIdStorageStorageTypeIndexPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<IndexResponse>;
    public devicesDeviceIdStorageStorageTypeIndexPost(requestParameters: DevicesDeviceIdStorageStorageTypeIndexPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<IndexResponse>>;
    public devicesDeviceIdStorageStorageTypeIndexPost(requestParameters: DevicesDeviceIdStorageStorageTypeIndexPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<IndexResponse>>;
    public devicesDeviceIdStorageStorageTypeIndexPost(requestParameters: DevicesDeviceIdStorageStorageTypeIndexPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const deviceId = requestParameters?.deviceId;
        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling devicesDeviceIdStorageStorageTypeIndexPost.');
        }
        const storageType = requestParameters?.storageType;
        if (storageType === null || storageType === undefined) {
            throw new Error('Required parameter storageType was null or undefined when calling devicesDeviceIdStorageStorageTypeIndexPost.');
        }
        const body = requestParameters?.body;

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/problem+json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/devices/${this.configuration.encodeParam({name: "deviceId", value: deviceId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/storage/${this.configuration.encodeParam({name: "storageType", value: storageType, in: "path", style: "simple", explode: false, dataType: "TeensyStorageType", dataFormat: undefined})}/index`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<IndexResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: body,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Launches a file given a valid path to a file stored on the TeensyRom.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public devicesDeviceIdStorageStorageTypeLaunchPost(requestParameters: DevicesDeviceIdStorageStorageTypeLaunchPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<LaunchFileResponse>;
    public devicesDeviceIdStorageStorageTypeLaunchPost(requestParameters: DevicesDeviceIdStorageStorageTypeLaunchPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<LaunchFileResponse>>;
    public devicesDeviceIdStorageStorageTypeLaunchPost(requestParameters: DevicesDeviceIdStorageStorageTypeLaunchPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<LaunchFileResponse>>;
    public devicesDeviceIdStorageStorageTypeLaunchPost(requestParameters: DevicesDeviceIdStorageStorageTypeLaunchPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const deviceId = requestParameters?.deviceId;
        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling devicesDeviceIdStorageStorageTypeLaunchPost.');
        }
        const storageType = requestParameters?.storageType;
        if (storageType === null || storageType === undefined) {
            throw new Error('Required parameter storageType was null or undefined when calling devicesDeviceIdStorageStorageTypeLaunchPost.');
        }
        const filePath = requestParameters?.filePath;
        if (filePath === null || filePath === undefined) {
            throw new Error('Required parameter filePath was null or undefined when calling devicesDeviceIdStorageStorageTypeLaunchPost.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>filePath, 'FilePath');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/problem+json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/devices/${this.configuration.encodeParam({name: "deviceId", value: deviceId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/storage/${this.configuration.encodeParam({name: "storageType", value: storageType, in: "path", style: "simple", explode: false, dataType: "TeensyStorageType", dataFormat: undefined})}/launch`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<LaunchFileResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Launches a random file given a device, storage and starting directory location.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public devicesDeviceIdStorageStorageTypeRandomLaunchPost(requestParameters: DevicesDeviceIdStorageStorageTypeRandomLaunchPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<LaunchRandomResponse>;
    public devicesDeviceIdStorageStorageTypeRandomLaunchPost(requestParameters: DevicesDeviceIdStorageStorageTypeRandomLaunchPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<LaunchRandomResponse>>;
    public devicesDeviceIdStorageStorageTypeRandomLaunchPost(requestParameters: DevicesDeviceIdStorageStorageTypeRandomLaunchPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<LaunchRandomResponse>>;
    public devicesDeviceIdStorageStorageTypeRandomLaunchPost(requestParameters: DevicesDeviceIdStorageStorageTypeRandomLaunchPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const deviceId = requestParameters?.deviceId;
        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling devicesDeviceIdStorageStorageTypeRandomLaunchPost.');
        }
        const storageType = requestParameters?.storageType;
        if (storageType === null || storageType === undefined) {
            throw new Error('Required parameter storageType was null or undefined when calling devicesDeviceIdStorageStorageTypeRandomLaunchPost.');
        }
        const filterType = requestParameters?.filterType;
        const scope = requestParameters?.scope;
        const startingDirectory = requestParameters?.startingDirectory;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>filterType, 'FilterType');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>scope, 'Scope');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>startingDirectory, 'StartingDirectory');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/problem+json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/devices/${this.configuration.encodeParam({name: "deviceId", value: deviceId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/storage/${this.configuration.encodeParam({name: "storageType", value: storageType, in: "path", style: "simple", explode: false, dataType: "TeensyStorageType", dataFormat: undefined})}/random-launch`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<LaunchRandomResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Indexes all storage for all connected TeensyRom devices.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public filesIndexAllPost(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<IndexAllResponse>;
    public filesIndexAllPost(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<IndexAllResponse>>;
    public filesIndexAllPost(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<IndexAllResponse>>;
    public filesIndexAllPost(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/problem+json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/files/index/all`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<IndexAllResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
